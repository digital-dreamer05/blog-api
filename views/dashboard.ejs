<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>User Dashboard</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        padding: 20px;
      }
      .dashboard-container {
        max-width: 1400px;
        margin: 0 auto;
      }
      .dashboard-header {
        background: white;
        padding: 25px 30px;
        border-radius: 15px;
        margin-bottom: 30px;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
      .dashboard-title {
        font-size: 2em;
        color: #2c3e50;
        font-weight: 700;
      }
      .back-btn {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 12px 25px;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        text-decoration: none;
        display: inline-block;
        transition: all 0.3s ease;
      }
      .back-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
      }
      .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
      }
      .stat-card {
        background: white;
        padding: 25px;
        border-radius: 15px;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
        text-align: center;
      }
      .stat-number {
        font-size: 2.5em;
        font-weight: 700;
        color: #667eea;
        margin-bottom: 10px;
      }
      .stat-label {
        color: #7f8c8d;
        font-size: 1em;
        font-weight: 600;
      }
      .content-section {
        background: white;
        padding: 30px;
        border-radius: 15px;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
        margin-bottom: 30px;
      }
      .section-title {
        font-size: 1.5em;
        color: #2c3e50;
        margin-bottom: 20px;
        font-weight: 700;
        border-bottom: 3px solid #667eea;
        padding-bottom: 10px;
      }
      .articles-list {
        display: flex;
        flex-direction: column;
        gap: 15px;
      }
      .article-item {
        display: flex;
        align-items: center;
        gap: 20px;
        padding: 20px;
        border: 2px solid #ecf0f1;
        border-radius: 10px;
        transition: all 0.3s ease;
      }
      .article-item:hover {
        border-color: #667eea;
        background: #f8f9ff;
      }
      .article-cover {
        width: 120px;
        height: 80px;
        object-fit: cover;
        border-radius: 8px;
      }
      .article-info {
        flex: 1;
      }
      .article-title {
        font-size: 1.2em;
        color: #2c3e50;
        font-weight: 600;
        margin-bottom: 5px;
      }
      .article-date {
        color: #95a5a6;
        font-size: 0.9em;
      }
      .article-actions {
        display: flex;
        gap: 10px;
      }
      .action-btn {
        padding: 10px 20px;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-block;
      }
      .edit-btn {
        background: #3498db;
        color: white;
      }
      .edit-btn:hover {
        background: #2980b9;
        transform: translateY(-2px);
      }
      .delete-btn {
        background: #e74c3c;
        color: white;
      }
      .delete-btn:hover {
        background: #c0392b;
        transform: translateY(-2px);
      }
      .users-table {
        width: 100%;
        border-collapse: collapse;
      }
      .users-table th,
      .users-table td {
        padding: 15px;
        text-align: left;
        border-bottom: 1px solid #ecf0f1;
      }
      .users-table th {
        background: #f8f9fa;
        color: #2c3e50;
        font-weight: 700;
      }
      .users-table tr:hover {
        background: #f8f9ff;
      }
      .role-badge {
        display: inline-block;
        padding: 5px 15px;
        border-radius: 20px;
        font-size: 0.85em;
        font-weight: 600;
      }
      .role-admin {
        background: #e74c3c;
        color: white;
      }
      .role-user {
        background: #3498db;
        color: white;
      }
      .loading {
        text-align: center;
        padding: 50px;
        color: #7f8c8d;
        font-size: 1.2em;
      }
      .empty-state {
        text-align: center;
        padding: 60px 20px;
        color: #95a5a6;
      }
      .empty-icon {
        font-size: 4em;
        margin-bottom: 20px;
      }
      @media (max-width: 768px) {
        .dashboard-header {
          flex-direction: column;
          gap: 15px;
        }
        .article-item {
          flex-direction: column;
          text-align: center;
        }
        .article-actions {
          width: 100%;
        }
        .action-btn {
          flex: 1;
        }
        .users-table {
          font-size: 0.9em;
        }
      }
    </style>
  </head>
  <body>
    <div class="dashboard-container">
      <div class="dashboard-header">
        <h1 class="dashboard-title" id="dashboardTitle">User Dashboard</h1>
        <a href="/" class="back-btn">Back to Home</a>
      </div>

      <div class="stats-grid" id="statsGrid">
        <div class="loading">Loading...</div>
      </div>

      <div id="mainContent">
        <div class="loading">Loading data...</div>
      </div>
    </div>

    <script>
      const accessToken = localStorage.getItem('accessToken');

      if (!accessToken) {
        window.location.href = '/login';
      }

      async function fetchWithAuth(url) {
        const response = await fetch(url, {
          headers: { Authorization: `Bearer ${accessToken}` },
        });
        if (response.status === 401) {
          localStorage.removeItem('accessToken');
          localStorage.removeItem('refreshToken');
          window.location.href = '/login';
          return null;
        }
        return response.json();
      }

      async function loadDashboard() {
        const user = await fetchWithAuth('/auth/me');
        if (!user) return;

        if (user.role === 'admin') {
          await loadAdminDashboard();
        } else {
          await loadUserDashboard(user);
        }
      }

      async function loadUserDashboard(user) {
        document.getElementById(
          'dashboardTitle'
        ).textContent = `User Dashboard - ${user.name || user.username}`;

        const articles = await fetchWithAuth('/articles');
        const userArticles = articles.filter((a) => a.author.id === user.id);

        document.getElementById('statsGrid').innerHTML = `
          <div class="stat-card">
            <div class="stat-number">${userArticles.length}</div>
            <div class="stat-label">My Articles</div>
          </div>
          <div class="stat-card">
            <div class="stat-number">${articles.length}</div>
            <div class="stat-label">Total Articles</div>
          </div>
        `;

        if (userArticles.length === 0) {
          document.getElementById('mainContent').innerHTML = `
            <div class="content-section">
              <h2 class="section-title">My Articles</h2>
              <div class="empty-state">
                <div class="empty-icon">üìù</div>
                <p>You haven't written any articles yet</p>
              </div>
            </div>
          `;
        } else {
          document.getElementById('mainContent').innerHTML = `
            <div class="content-section">
              <h2 class="section-title">My Articles</h2>
              <div class="articles-list" id="articlesList"></div>
            </div>
          `;

          const articlesList = document.getElementById('articlesList');
          userArticles.forEach((article) => {
            const articleEl = document.createElement('div');
            articleEl.className = 'article-item';
            articleEl.innerHTML = `
              <img src="${article.cover || '/images/default-cover.jpg'}" 
                   alt="${article.title}" 
                   class="article-cover" />
              <div class="article-info">
                <div class="article-title">${article.title}</div>
                <div class="article-date">${new Date(
                  article.createdAt
                ).toLocaleDateString('en-US')}</div>
              </div>
              <div class="article-actions">
                <a href="/edit/${
                  article.id
                }" class="action-btn edit-btn">Edit</a>
                <button onclick="deleteArticle(${
                  article.id
                })" class="action-btn delete-btn">Delete</button>
              </div>
            `;
            articlesList.appendChild(articleEl);
          });
        }
      }

      async function loadAdminDashboard() {
        document.getElementById('dashboardTitle').textContent =
          'Admin Dashboard';

        const [articles, usersResponse] = await Promise.all([
          fetchWithAuth('/articles'),
          fetch('/auth/users', {
            headers: { Authorization: `Bearer ${accessToken}` },
          }),
        ]);

        const users = usersResponse.ok ? await usersResponse.json() : [];

        document.getElementById('statsGrid').innerHTML = `
          <div class="stat-card">
            <div class="stat-number">${users.length}</div>
            <div class="stat-label">Users</div>
          </div>
          <div class="stat-card">
            <div class="stat-number">${articles.length}</div>
            <div class="stat-label">Articles</div>
          </div>
          <div class="stat-card">
            <div class="stat-number">${
              users.filter((u) => u.role === 'admin').length
            }</div>
            <div class="stat-label">Admins</div>
          </div>
        `;

        document.getElementById('mainContent').innerHTML = `
          <div class="content-section">
            <h2 class="section-title">Users</h2>
            <table class="users-table">
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Email</th>
                  <th>Role</th>
                  <th>Articles Count</th>
                </tr>
              </thead>
              <tbody id="usersTableBody"></tbody>
            </table>
          </div>
          <div class="content-section">
            <h2 class="section-title">All Articles</h2>
            <div class="articles-list" id="allArticlesList"></div>
          </div>
        `;

        const usersTableBody = document.getElementById('usersTableBody');
        users.forEach((user) => {
          const userArticles = articles.filter((a) => a.author.id === user.id);
          const row = document.createElement('tr');
          row.innerHTML = `
            <td>${user.name || user.username}</td>
            <td>${user.email}</td>
            <td>
              <span class="role-badge role-${user.role}">
                ${user.role === 'admin' ? 'Admin' : 'User'}
              </span>
            </td>
            <td>${userArticles.length}</td>
          `;
          usersTableBody.appendChild(row);
        });

        const allArticlesList = document.getElementById('allArticlesList');
        articles.forEach((article) => {
          const articleEl = document.createElement('div');
          articleEl.className = 'article-item';
          articleEl.innerHTML = `
            <img src="${article.cover || '/images/default-cover.jpg'}" 
                 alt="${article.title}" 
                 class="article-cover" />
            <div class="article-info">
              <div class="article-title">${article.title}</div>
              <div class="article-date">
                Author: ${article.author.name || article.author.username} | 
                ${new Date(article.createdAt).toLocaleDateString('en-US')}
              </div>
            </div>
            <div class="article-actions">
              <button onclick="deleteArticle(${
                article.id
              })" class="action-btn delete-btn">Delete</button>
            </div>
          `;
          allArticlesList.appendChild(articleEl);
        });
      }

      async function deleteArticle(id) {
        if (!confirm('Are you sure you want to delete this article?')) return;

        try {
          const response = await fetch(`/articles/${id}`, {
            method: 'DELETE',
            headers: { Authorization: `Bearer ${accessToken}` },
          });

          if (response.ok) {
            alert('Article deleted successfully');
            loadDashboard();
          } else {
            alert('Error deleting article');
          }
        } catch (error) {
          console.error('Error deleting article:', error);
          alert('Error deleting article');
        }
      }

      loadDashboard();
    </script>
  </body>
</html>
