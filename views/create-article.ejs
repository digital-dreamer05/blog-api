<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Create New Article - My Blog</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f5f5f5;
        color: #333;
        line-height: 1.6;
      }

      .navbar {
        background-color: #fff;
        padding: 20px 0;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        margin-bottom: 40px;
      }

      .navbar .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      .navbar h1 {
        font-size: 1.5em;
        color: #2c3e50;
      }

      .back-link {
        text-decoration: none;
        color: #3498db;
        font-weight: 500;
        transition: color 0.3s ease;
      }

      .back-link:hover {
        color: #2980b9;
      }

      .form-container {
        max-width: 900px;
        margin: 0 auto;
        padding: 0 20px 60px;
      }

      .form-card {
        background: #fff;
        padding: 40px;
        border-radius: 8px;
        box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);
      }

      .form-title {
        font-size: 2em;
        color: #2c3e50;
        margin-bottom: 30px;
      }

      .form-group {
        margin-bottom: 25px;
      }

      label {
        display: block;
        margin-bottom: 8px;
        font-weight: 600;
        color: #555;
        font-size: 0.95em;
      }

      input[type='text'],
      textarea,
      input[type='file'] {
        width: 100%;
        padding: 12px 15px;
        border: 2px solid #e0e0e0;
        border-radius: 5px;
        font-size: 1em;
        font-family: inherit;
        transition: border-color 0.3s ease;
      }

      input[type='text']:focus,
      textarea:focus {
        outline: none;
        border-color: #3498db;
      }

      textarea {
        min-height: 400px;
        resize: vertical;
        font-family: 'Courier New', monospace;
      }

      .tags-input {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        padding: 8px;
        border: 2px solid #e0e0e0;
        border-radius: 5px;
        min-height: 50px;
      }

      .tags-input:focus-within {
        border-color: #3498db;
      }

      .tag-item {
        background-color: #e8f4f8;
        color: #3498db;
        padding: 6px 12px;
        border-radius: 15px;
        font-size: 0.9em;
        display: flex;
        align-items: center;
        gap: 8px;
      }

      .tag-remove {
        cursor: pointer;
        font-weight: bold;
        color: #3498db;
      }

      .tag-remove:hover {
        color: #e74c3c;
      }

      #tagInput {
        border: none;
        outline: none;
        flex: 1;
        min-width: 120px;
        padding: 6px;
      }

      .file-input-wrapper {
        position: relative;
        display: inline-block;
        width: 100%;
      }

      .file-input-label {
        display: inline-block;
        padding: 12px 20px;
        background-color: #3498db;
        color: white;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        text-align: center;
      }

      .file-input-label:hover {
        background-color: #2980b9;
      }

      input[type='file'] {
        display: none;
      }

      .file-name {
        display: inline-block;
        margin-left: 15px;
        color: #666;
        font-size: 0.9em;
      }

      .preview-image {
        max-width: 100%;
        max-height: 300px;
        margin-top: 15px;
        border-radius: 5px;
        display: none;
      }

      .button-group {
        display: flex;
        gap: 15px;
        margin-top: 30px;
      }

      .btn {
        padding: 14px 30px;
        border: none;
        border-radius: 5px;
        font-size: 1em;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
      }

      .btn-primary {
        background-color: #3498db;
        color: white;
      }

      .btn-primary:hover {
        background-color: #2980b9;
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(52, 152, 219, 0.3);
      }

      .btn-secondary {
        background-color: #95a5a6;
        color: white;
      }

      .btn-secondary:hover {
        background-color: #7f8c8d;
      }

      .error-message {
        background-color: #fee;
        color: #c00;
        padding: 12px;
        border-radius: 5px;
        margin-bottom: 20px;
        display: none;
      }

      .success-message {
        background-color: #efe;
        color: #060;
        padding: 12px;
        border-radius: 5px;
        margin-bottom: 20px;
        display: none;
      }

      .helper-text {
        font-size: 0.85em;
        color: #999;
        margin-top: 5px;
      }

      @media (max-width: 768px) {
        .form-card {
          padding: 25px;
        }

        .button-group {
          flex-direction: column;
        }

        .btn {
          width: 100%;
        }
      }
    </style>
  </head>
  <body>
    <nav class="navbar">
      <div class="container">
        <h1>My Blog</h1>
        <a href="/" class="back-link">← Back to Home</a>
      </div>
    </nav>

    <div class="form-container">
      <div class="form-card">
        <h2 class="form-title">Create New Article</h2>

        <div id="errorMessage" class="error-message"></div>
        <div id="successMessage" class="success-message"></div>

        <form id="articleForm" enctype="multipart/form-data">
          <div class="form-group">
            <label for="title">Article Title *</label>
            <input
              type="text"
              id="title"
              name="title"
              required
              placeholder="Enter article title..."
            />
          </div>

          <div class="form-group">
            <label for="content">Content *</label>
            <textarea
              id="content"
              name="content"
              required
              placeholder="Write your article content here... (Supports HTML)"
            ></textarea>
            <div class="helper-text">You can use HTML tags for formatting</div>
          </div>

          <div class="form-group">
            <label for="tags">Tags</label>
            <div class="tags-input" id="tagsContainer">
              <input
                type="text"
                id="tagInput"
                placeholder="Type and press Enter to add tags..."
              />
            </div>
            <div class="helper-text">Press Enter to add each tag</div>
          </div>

          <div class="form-group">
            <label>Cover Image</label>
            <div class="file-input-wrapper">
              <label for="cover" class="file-input-label">
                Choose Cover Image
              </label>
              <input type="file" id="cover" name="cover" accept="image/*" />
              <span class="file-name" id="fileName">No file chosen</span>
            </div>
            <img id="imagePreview" class="preview-image" alt="Preview" />
          </div>

          <div class="button-group">
            <button type="submit" class="btn btn-primary">
              Publish Article
            </button>
            <button
              type="button"
              class="btn btn-secondary"
              onclick="window.location.href='/'"
            >
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>

    <script>
      // Tags functionality
      const tagsContainer = document.getElementById('tagsContainer');
      const tagInput = document.getElementById('tagInput');
      const tags = [];

      tagInput.addEventListener('keydown', function (e) {
        if (e.key === 'Enter') {
          e.preventDefault();
          const tag = tagInput.value.trim();
          if (tag && !tags.includes(tag)) {
            tags.push(tag);
            addTagElement(tag);
            tagInput.value = '';
          }
        }
      });

      function addTagElement(tag) {
        const tagElement = document.createElement('div');
        tagElement.className = 'tag-item';
        tagElement.innerHTML = `
                ${tag}
                <span class="tag-remove" onclick="removeTag('${tag}')">×</span>
            `;
        tagsContainer.insertBefore(tagElement, tagInput);
      }

      function removeTag(tag) {
        const index = tags.indexOf(tag);
        if (index > -1) {
          tags.splice(index, 1);
        }
        updateTagsDisplay();
      }

      function updateTagsDisplay() {
        const tagElements = tagsContainer.querySelectorAll('.tag-item');
        tagElements.forEach((el) => el.remove());
        tags.forEach((tag) => addTagElement(tag));
      }

      // File input functionality
      const fileInput = document.getElementById('cover');
      const fileName = document.getElementById('fileName');
      const imagePreview = document.getElementById('imagePreview');

      fileInput.addEventListener('change', function (e) {
        if (e.target.files.length > 0) {
          const file = e.target.files[0];
          fileName.textContent = file.name;

          // Preview image
          const reader = new FileReader();
          reader.onload = function (e) {
            imagePreview.src = e.target.result;
            imagePreview.style.display = 'block';
          };
          reader.readAsDataURL(file);
        } else {
          fileName.textContent = 'No file chosen';
          imagePreview.style.display = 'none';
        }
      });

      // Form submission
      const articleForm = document.getElementById('articleForm');
      const errorMessage = document.getElementById('errorMessage');
      const successMessage = document.getElementById('successMessage');

      articleForm.addEventListener('submit', async function (e) {
        e.preventDefault();

        // Get token from localStorage (or wherever you store it)
        const token = localStorage.getItem('accessToken');

        if (!token) {
          showError('You must be logged in to create an article');
          return;
        }

        const formData = new FormData();
        formData.append('title', document.getElementById('title').value);
        formData.append('content', document.getElementById('content').value);

        // Add tags
        tags.forEach((tag) => {
          formData.append('tags', tag);
        });

        // Add cover image if selected
        const coverFile = document.getElementById('cover').files[0];
        if (coverFile) {
          formData.append('cover', coverFile);
        }

        try {
          const response = await fetch('/articles', {
            method: 'POST',
            headers: {
              Authorization: `Bearer ${token}`,
            },
            body: formData,
          });

          const data = await response.json();

          if (response.ok) {
            showSuccess('Article created successfully! Redirecting...');
            setTimeout(() => {
              window.location.href = `/article/${data.slug}`;
            }, 1500);
          } else {
            showError(data.message || 'Failed to create article');
          }
        } catch (error) {
          console.error('Error:', error);
          showError('An error occurred. Please try again.');
        }
      });

      function showError(message) {
        errorMessage.textContent = message;
        errorMessage.style.display = 'block';
        successMessage.style.display = 'none';
        window.scrollTo({ top: 0, behavior: 'smooth' });
      }

      function showSuccess(message) {
        successMessage.textContent = message;
        successMessage.style.display = 'block';
        errorMessage.style.display = 'none';
        window.scrollTo({ top: 0, behavior: 'smooth' });
      }
    </script>
  </body>
</html>
